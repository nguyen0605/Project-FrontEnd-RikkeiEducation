// D·ªØ li·ªáu danh m·ª•c gi·∫£ l·∫≠p
let categories = JSON.parse(localStorage.getItem('categories')) || [
    { id: 1, name: "üìö L·ªãch s·ª≠"},
    { id: 2, name: "üß™ Khoa h·ªçc"},
    { id: 3, name: "üìö VƒÉn h·ªçc"},
    { id: 4, name: "‚úèÔ∏è Gi·∫£i tr√≠"},
    { id: 5, name: "üìê To√°n h·ªçc"},
    { id: 6, name: "üåç ƒê·ªãa l√Ω"},
    { id: 7, name: "üìñ Ti·∫øng Anh"},
    { id: 8, name: "üíª L·∫≠p tr√¨nh"},
    { id: 9, name: "üé® Ngh·ªá thu·∫≠t"},
    { id: 10, name: "üéÆ Tr√≤ ch∆°i"},
    { id: 11, name: "üí° S√°ng t·∫°o"},
    { id: 12, name: "‚úèÔ∏è ƒê·ªùi s·ªëng"},
    { id: 13, name: "üß† Ki·∫øn th·ª©c chung"},
]

const itemsPerPage = 5; // S·ªë l∆∞·ª£ng m·ª•c tr√™n m·ªói trang
let currentPage = 1; // Trang hi·ªán t·∫°i

// H√†m hi·ªÉn th·ªã danh m·ª•c
function renderCategories() {
  const tbody = document.getElementById('categoryTableBody');
  tbody.innerHTML = ''; // Xo√° c√°c h√†ng c≈© trong b·∫£ng

  const startIdx = (currentPage - 1) * itemsPerPage;
  const endIdx = startIdx + itemsPerPage;
  const categoriesToDisplay = categories.slice(startIdx, endIdx);

  categoriesToDisplay.forEach(category => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${category.id}</td>
      <td>${category.name}</td>
      <td>
        <button class="btn btn-warning btn-sm me-2" onclick="openEditModal(${category.id}, '${category.name}')">S·ª≠a</button>
        <button class="btn btn-danger btn-sm" onclick="openDeleteModal(${category.id})">Xo√°</button>
      </td>
    `;
    tbody.appendChild(row);
  });
}

// H√†m hi·ªÉn th·ªã ph√¢n trang
function renderPagination() {
  const totalPages = Math.ceil(categories.length / itemsPerPage);
  const pagination = document.getElementById('pagination');
  pagination.innerHTML = '';

  const prevPageLink = document.createElement('li');
  prevPageLink.classList.add('page-item');
  if (currentPage === 1) {
    prevPageLink.classList.add('disabled');
  }
  prevPageLink.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage - 1})">¬´</a>`;
  pagination.appendChild(prevPageLink);

  for (let i = 1; i <= totalPages; i++) {
    const pageLink = document.createElement('li');
    pageLink.classList.add('page-item');
    if (i === currentPage) {
      pageLink.classList.add('active');
    }
    pageLink.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
    pagination.appendChild(pageLink);
  }

  const nextPageLink = document.createElement('li');
  nextPageLink.classList.add('page-item');
  if (currentPage === totalPages) {
    nextPageLink.classList.add('disabled');
  }
  nextPageLink.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage + 1})">¬ª</a>`;
  pagination.appendChild(nextPageLink);
}

// H√†m thay ƒë·ªïi trang
function changePage(page) {
  if (page < 1 || page > Math.ceil(categories.length / itemsPerPage)) return;
  currentPage = page;
  renderCategories();
  renderPagination();
}

// H√†m m·ªü modal th√™m danh m·ª•c
function openAddModal() {
  const modal = document.getElementById('addCategoryModal');
  modal.classList.add('open');
}

// H√†m ƒë√≥ng modal th√™m danh m·ª•c
function closeAddModal() {
  const modal = document.getElementById('addCategoryModal');
  modal.classList.remove('open');
}

// H√†m m·ªü modal s·ª≠a danh m·ª•c
function openEditModal(id, name) {
  const modal = document.getElementById('editCategoryModal');
  document.getElementById('editCategoryName').value = name;
  modal.classList.add('open');
  modal.dataset.categoryId = id;
}

// H√†m ƒë√≥ng modal s·ª≠a danh m·ª•c
function closeEditModal() {
  const modal = document.getElementById('editCategoryModal');
  modal.classList.remove('open');
}

// H√†m x·ª≠ l√Ω l∆∞u s·ª≠a danh m·ª•c
document.getElementById('editCategoryForm').addEventListener('submit', function (e) {
  e.preventDefault();
  const modal = document.getElementById('editCategoryModal');
  const categoryId = modal.dataset.categoryId;
  const categoryName = document.getElementById('editCategoryName').value;

  const category = categories.find(c => c.id === parseInt(categoryId));
  if (category) {
    category.name = categoryName; // C·∫≠p nh·∫≠t t√™n danh m·ª•c
  }

  saveCategoriesToLocalStorage();
  closeEditModal();
  renderCategories();
  renderPagination();
});

// H√†m x·ª≠ l√Ω th√™m danh m·ª•c
document.getElementById('addCategoryForm').addEventListener('submit', function (e) {
  e.preventDefault(); // Ng·ª´ng h√†nh ƒë·ªông m·∫∑c ƒë·ªãnh c·ªßa form

  const categoryName = document.getElementById('categoryName').value.trim();
  const errorMessage = document.getElementById('error-message'); // L·∫•y ph·∫ßn t·ª≠ hi·ªÉn th·ªã l·ªói

  // X√≥a l·ªói c≈© n·∫øu c√≥
  if (errorMessage) {
    errorMessage.remove();
  }

  // Ki·ªÉm tra n·∫øu t√™n danh m·ª•c tr·ªëng
  if (!categoryName) {
    // T·∫°o th√¥ng b√°o l·ªói
    const errorDiv = document.createElement('div');
    errorDiv.id = 'error-message';
    errorDiv.style.color = 'red';
    errorDiv.style.fontSize = '14px';
    errorDiv.textContent = 'T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';

    // Th√™m th√¥ng b√°o l·ªói d∆∞·ªõi √¥ input
    document.getElementById('categoryName').insertAdjacentElement('afterend', errorDiv);
    return;
  }

  // Lo·∫°i b·ªè icon ƒë·ªÉ so s√°nh t√™n
  const categoryNameWithoutIcon = categoryName.replace(/^[^\w\s]+/g, '').trim(); // Lo·∫°i b·ªè icon (d·∫•u ƒë·∫ßu ti√™n kh√¥ng ph·∫£i ch·ªØ)

  // Ki·ªÉm tra n·∫øu t√™n danh m·ª•c ƒë√£ t·ªìn t·∫°i
  const categoryExists = categories.some(category => {
    const categoryNameWithoutIconExisting = category.name.replace(/^[^\w\s]+/g, '').trim();
    return categoryNameWithoutIconExisting.toLowerCase() === categoryNameWithoutIcon.toLowerCase();
  });

  if (categoryExists) {
    // T·∫°o th√¥ng b√°o l·ªói
    const errorDiv = document.createElement('div');
    errorDiv.id = 'error-message';
    errorDiv.style.color = 'red';
    errorDiv.style.fontSize = '14px';
    errorDiv.textContent = 'Danh m·ª•c n√†y ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn t√™n kh√°c.';

    // Th√™m th√¥ng b√°o l·ªói d∆∞·ªõi √¥ input
    document.getElementById('categoryName').insertAdjacentElement('afterend', errorDiv);
    return;
  }

  // Danh s√°ch c√°c icon ƒë·ªÉ g√°n ng·∫´u nhi√™n
  const icons = ["üìö", "üß™", "‚úèÔ∏è", "üìê", "üåç", "üìñ", "üíª", "üé®", "üéÆ", "üí°","üß†"];

  // L·∫•y icon ng·∫´u nhi√™n t·ª´ m·∫£ng icons
  const randomIcon = icons[Math.floor(Math.random() * icons.length)];

  // T·∫°o danh m·ª•c m·ªõi
  const newCategory = {
    id: categories.length + 1, // T·∫°o ID t·ª± ƒë·ªông
    name: randomIcon + " " + categoryName // Th√™m icon v√†o t√™n danh m·ª•c
  };

  categories.push(newCategory); // Th√™m v√†o m·∫£ng danh m·ª•c
  saveCategoriesToLocalStorage(); // L∆∞u danh m·ª•c v√†o localStorage
  closeAddModal(); // ƒê√≥ng modal th√™m danh m·ª•c
  renderCategories(); // Render l·∫°i danh s√°ch danh m·ª•c
  renderPagination(); // Render l·∫°i ph√¢n trang
});



// Modal x√≥a danh m·ª•c
function openDeleteModal(id) {
  const deleteModal = document.getElementById('deleteCategoryModal');
  deleteModal.classList.add('open');

  // Khi b·∫•m "C√≥", x√≥a danh m·ª•c
  document.getElementById('confirmDelete').onclick = function () {
    deleteCategory(id);
    closeDeleteModal();
  };

  // Khi b·∫•m "Kh√¥ng", ƒë√≥ng modal m√† kh√¥ng l√†m g√¨
  document.getElementById('cancelDelete').onclick = function () {
    closeDeleteModal();
  };
}

// X√≥a danh m·ª•c
function deleteCategory(id) {
  categories = categories.filter(category => category.id !== id);
  saveCategoriesToLocalStorage();
  renderCategories();
  renderPagination();
}

// ƒê√≥ng modal x√≥a
function closeDeleteModal() {
  const deleteModal = document.getElementById('deleteCategoryModal');
  deleteModal.classList.remove('open');
}

// L∆∞u danh m·ª•c v√†o localStorage
function saveCategoriesToLocalStorage() {
  localStorage.setItem('categories', JSON.stringify(categories));
}

// Kh·ªüi t·∫°o trang ban ƒë·∫ßu
renderCategories();
renderPagination();

